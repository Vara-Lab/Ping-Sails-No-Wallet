// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}
pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct Ping<R> {
    remoting: R,
}
impl<R> Ping<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Ping for Ping<R> {
    type Args = R::Args;
    fn ping(&mut self) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::Ping>::new(self.remoting.clone(), ())
    }
    fn ping_no_wallet(
        &mut self,
        no_wallet_name_encoded: String,
    ) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::PingNoWallet>::new(
            self.remoting.clone(),
            no_wallet_name_encoded,
        )
    }
    fn ping_signless(
        &mut self,
        user_address: ActorId,
    ) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::PingSignless>::new(self.remoting.clone(), user_address)
    }
    fn pong(&mut self) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::Pong>::new(self.remoting.clone(), ())
    }
    fn pong_no_wallet(
        &mut self,
        no_wallet_name_encoded: String,
    ) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::PongNoWallet>::new(
            self.remoting.clone(),
            no_wallet_name_encoded,
        )
    }
    fn pong_signless(
        &mut self,
        user_address: ActorId,
    ) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::PongSignless>::new(self.remoting.clone(), user_address)
    }
}
pub mod ping {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Ping(());
        impl Ping {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Ping as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Ping {
            const ROUTE: &'static [u8] = &[16, 80, 105, 110, 103, 16, 80, 105, 110, 103];
            type Params = ();
            type Reply = super::PingEvent;
        }
        pub struct PingNoWallet(());
        impl PingNoWallet {
            #[allow(dead_code)]
            pub fn encode_call(no_wallet_name_encoded: String) -> Vec<u8> {
                <PingNoWallet as ActionIo>::encode_call(&no_wallet_name_encoded)
            }
        }
        impl ActionIo for PingNoWallet {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 48, 80, 105, 110, 103, 78, 111, 87, 97, 108, 108, 101, 116,
            ];
            type Params = String;
            type Reply = super::PingEvent;
        }
        pub struct PingSignless(());
        impl PingSignless {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId) -> Vec<u8> {
                <PingSignless as ActionIo>::encode_call(&user_address)
            }
        }
        impl ActionIo for PingSignless {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 48, 80, 105, 110, 103, 83, 105, 103, 110, 108, 101, 115, 115,
            ];
            type Params = ActorId;
            type Reply = super::PingEvent;
        }
        pub struct Pong(());
        impl Pong {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Pong as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Pong {
            const ROUTE: &'static [u8] = &[16, 80, 105, 110, 103, 16, 80, 111, 110, 103];
            type Params = ();
            type Reply = super::PingEvent;
        }
        pub struct PongNoWallet(());
        impl PongNoWallet {
            #[allow(dead_code)]
            pub fn encode_call(no_wallet_name_encoded: String) -> Vec<u8> {
                <PongNoWallet as ActionIo>::encode_call(&no_wallet_name_encoded)
            }
        }
        impl ActionIo for PongNoWallet {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 48, 80, 111, 110, 103, 78, 111, 87, 97, 108, 108, 101, 116,
            ];
            type Params = String;
            type Reply = super::PingEvent;
        }
        pub struct PongSignless(());
        impl PongSignless {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId) -> Vec<u8> {
                <PongSignless as ActionIo>::encode_call(&user_address)
            }
        }
        impl ActionIo for PongSignless {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 48, 80, 111, 110, 103, 83, 105, 103, 110, 108, 101, 115, 115,
            ];
            type Params = ActorId;
            type Reply = super::PingEvent;
        }
    }
}
pub struct QueryService<R> {
    remoting: R,
}
impl<R> QueryService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::QueryService for QueryService<R> {
    type Args = R::Args;
    fn last_who_call(&self) -> impl Query<Output = QueryEvent, Args = R::Args> {
        RemotingAction::<_, query_service::io::LastWhoCall>::new(self.remoting.clone(), ())
    }
    fn signless_account_data(
        &self,
        signless_address: ActorId,
    ) -> impl Query<Output = QueryEvent, Args = R::Args> {
        RemotingAction::<_, query_service::io::SignlessAccountData>::new(
            self.remoting.clone(),
            signless_address,
        )
    }
    fn signless_address_from_no_wallet_account(
        &self,
        no_wallet_account: String,
    ) -> impl Query<Output = QueryEvent, Args = R::Args> {
        RemotingAction::<_, query_service::io::SignlessAddressFromNoWalletAccount>::new(
            self.remoting.clone(),
            no_wallet_account,
        )
    }
    fn signless_address_from_user_address(
        &self,
        user_address: ActorId,
    ) -> impl Query<Output = QueryEvent, Args = R::Args> {
        RemotingAction::<_, query_service::io::SignlessAddressFromUserAddress>::new(
            self.remoting.clone(),
            user_address,
        )
    }
}
pub mod query_service {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct LastWhoCall(());
        impl LastWhoCall {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <LastWhoCall as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for LastWhoCall {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 44, 76, 97, 115, 116,
                87, 104, 111, 67, 97, 108, 108,
            ];
            type Params = ();
            type Reply = super::QueryEvent;
        }
        pub struct SignlessAccountData(());
        impl SignlessAccountData {
            #[allow(dead_code)]
            pub fn encode_call(signless_address: ActorId) -> Vec<u8> {
                <SignlessAccountData as ActionIo>::encode_call(&signless_address)
            }
        }
        impl ActionIo for SignlessAccountData {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 76, 83, 105, 103, 110,
                108, 101, 115, 115, 65, 99, 99, 111, 117, 110, 116, 68, 97, 116, 97,
            ];
            type Params = ActorId;
            type Reply = super::QueryEvent;
        }
        pub struct SignlessAddressFromNoWalletAccount(());
        impl SignlessAddressFromNoWalletAccount {
            #[allow(dead_code)]
            pub fn encode_call(no_wallet_account: String) -> Vec<u8> {
                <SignlessAddressFromNoWalletAccount as ActionIo>::encode_call(&no_wallet_account)
            }
        }
        impl ActionIo for SignlessAddressFromNoWalletAccount {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 136, 83, 105, 103,
                110, 108, 101, 115, 115, 65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109, 78,
                111, 87, 97, 108, 108, 101, 116, 65, 99, 99, 111, 117, 110, 116,
            ];
            type Params = String;
            type Reply = super::QueryEvent;
        }
        pub struct SignlessAddressFromUserAddress(());
        impl SignlessAddressFromUserAddress {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId) -> Vec<u8> {
                <SignlessAddressFromUserAddress as ActionIo>::encode_call(&user_address)
            }
        }
        impl ActionIo for SignlessAddressFromUserAddress {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 120, 83, 105, 103,
                110, 108, 101, 115, 115, 65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109, 85,
                115, 101, 114, 65, 100, 100, 114, 101, 115, 115,
            ];
            type Params = ActorId;
            type Reply = super::QueryEvent;
        }
    }
}
pub struct Signless<R> {
    remoting: R,
}
impl<R> Signless<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Signless for Signless<R> {
    type Args = R::Args;
    fn bind_signless_data_to_address(
        &mut self,
        user_address: ActorId,
        signless_data: SignlessAccount,
    ) -> impl Call<Output = SignlessEvent, Args = R::Args> {
        RemotingAction::<_, signless::io::BindSignlessDataToAddress>::new(
            self.remoting.clone(),
            (user_address, signless_data),
        )
    }
    fn bind_signless_data_to_no_wallet_account(
        &mut self,
        no_wallet_account: String,
        signless_data: SignlessAccount,
    ) -> impl Call<Output = SignlessEvent, Args = R::Args> {
        RemotingAction::<_, signless::io::BindSignlessDataToNoWalletAccount>::new(
            self.remoting.clone(),
            (no_wallet_account, signless_data),
        )
    }
}
pub mod signless {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct BindSignlessDataToAddress(());
        impl BindSignlessDataToAddress {
            #[allow(dead_code)]
            pub fn encode_call(
                user_address: ActorId,
                signless_data: super::SignlessAccount,
            ) -> Vec<u8> {
                <BindSignlessDataToAddress as ActionIo>::encode_call(&(user_address, signless_data))
            }
        }
        impl ActionIo for BindSignlessDataToAddress {
            const ROUTE: &'static [u8] = &[
                32, 83, 105, 103, 110, 108, 101, 115, 115, 100, 66, 105, 110, 100, 83, 105, 103,
                110, 108, 101, 115, 115, 68, 97, 116, 97, 84, 111, 65, 100, 100, 114, 101, 115,
                115,
            ];
            type Params = (ActorId, super::SignlessAccount);
            type Reply = super::SignlessEvent;
        }
        pub struct BindSignlessDataToNoWalletAccount(());
        impl BindSignlessDataToNoWalletAccount {
            #[allow(dead_code)]
            pub fn encode_call(
                no_wallet_account: String,
                signless_data: super::SignlessAccount,
            ) -> Vec<u8> {
                <BindSignlessDataToNoWalletAccount as ActionIo>::encode_call(&(
                    no_wallet_account,
                    signless_data,
                ))
            }
        }
        impl ActionIo for BindSignlessDataToNoWalletAccount {
            const ROUTE: &'static [u8] = &[
                32, 83, 105, 103, 110, 108, 101, 115, 115, 132, 66, 105, 110, 100, 83, 105, 103,
                110, 108, 101, 115, 115, 68, 97, 116, 97, 84, 111, 78, 111, 87, 97, 108, 108, 101,
                116, 65, 99, 99, 111, 117, 110, 116,
            ];
            type Params = (String, super::SignlessAccount);
            type Reply = super::SignlessEvent;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum PingEvent {
    Ping,
    Pong,
    SignlessError(SignlessError),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum SignlessError {
    SignlessAccountHasInvalidSession,
    SignlessAccountNotApproved,
    SignlessAddressAlreadyEsists,
    UserAddressAlreadyExists,
    UserDoesNotHasSignlessAccount,
    NoWalletAccountAlreadyExists,
    NoWalletAccountDoesNotHasSignlessAccount,
    SessionHasInvalidSignlessAccount,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum QueryEvent {
    LastWhoCall(ActorId),
    SignlessAccountAddress(Option<ActorId>),
    SignlessAccountData(Option<SignlessAccount>),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct SignlessAccount {
    pub address: String,
    pub encoded: String,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum SignlessEvent {
    SignlessAccountSet,
    Error(SignlessError),
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait Ping {
        type Args;
        fn ping(&mut self) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn ping_no_wallet(
            &mut self,
            no_wallet_name_encoded: String,
        ) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn ping_signless(
            &mut self,
            user_address: ActorId,
        ) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn pong(&mut self) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn pong_no_wallet(
            &mut self,
            no_wallet_name_encoded: String,
        ) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn pong_signless(
            &mut self,
            user_address: ActorId,
        ) -> impl Call<Output = PingEvent, Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait QueryService {
        type Args;
        fn last_who_call(&self) -> impl Query<Output = QueryEvent, Args = Self::Args>;
        fn signless_account_data(
            &self,
            signless_address: ActorId,
        ) -> impl Query<Output = QueryEvent, Args = Self::Args>;
        fn signless_address_from_no_wallet_account(
            &self,
            no_wallet_account: String,
        ) -> impl Query<Output = QueryEvent, Args = Self::Args>;
        fn signless_address_from_user_address(
            &self,
            user_address: ActorId,
        ) -> impl Query<Output = QueryEvent, Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait Signless {
        type Args;
        fn bind_signless_data_to_address(
            &mut self,
            user_address: ActorId,
            signless_data: SignlessAccount,
        ) -> impl Call<Output = SignlessEvent, Args = Self::Args>;
        fn bind_signless_data_to_no_wallet_account(
            &mut self,
            no_wallet_account: String,
            signless_data: SignlessAccount,
        ) -> impl Call<Output = SignlessEvent, Args = Self::Args>;
    }
}
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub Ping<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::Ping for Ping<A> { type Args = A; fn ping (&mut self, ) -> MockCall<A, PingEvent>;fn ping_no_wallet (&mut self, no_wallet_name_encoded: String,) -> MockCall<A, PingEvent>;fn ping_signless (&mut self, user_address: ActorId,) -> MockCall<A, PingEvent>;fn pong (&mut self, ) -> MockCall<A, PingEvent>;fn pong_no_wallet (&mut self, no_wallet_name_encoded: String,) -> MockCall<A, PingEvent>;fn pong_signless (&mut self, user_address: ActorId,) -> MockCall<A, PingEvent>; } }
    mock! { pub QueryService<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::QueryService for QueryService<A> { type Args = A; fn last_who_call (& self, ) -> MockQuery<A, QueryEvent>;fn signless_account_data (& self, signless_address: ActorId,) -> MockQuery<A, QueryEvent>;fn signless_address_from_no_wallet_account (& self, no_wallet_account: String,) -> MockQuery<A, QueryEvent>;fn signless_address_from_user_address (& self, user_address: ActorId,) -> MockQuery<A, QueryEvent>; } }
    mock! { pub Signless<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::Signless for Signless<A> { type Args = A; fn bind_signless_data_to_address (&mut self, user_address: ActorId,signless_data: SignlessAccount,) -> MockCall<A, SignlessEvent>;fn bind_signless_data_to_no_wallet_account (&mut self, no_wallet_account: String,signless_data: SignlessAccount,) -> MockCall<A, SignlessEvent>; } }
}
